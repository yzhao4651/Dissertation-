bcplot <-
  function(data, lambda, add=if (zapsmall(small)<=0) 1-small else 0,
           bivariate=(!is.vector(data))&&(ncol(data)==2), main='',
           col=rgb(1,1,0,.3), lwd=2, cex.text=1.5, cex.lab=1.5, cex.main=2,
           ...)
    ####### Box-Cox Transformation of Univariate/Multivariate Data #######
#                                                                    #
# data --- numeric vector or matrix or a data frame of all numeric   #
#         columns                                                    #
# lambda --- numeric vector (default  is seq(-1,1,.025)) or          #
#         matrix of lambda values                                    #
# add --- a constant to add to the data to make all values positive  #
# bivariate --- should Bivariate Box-Cox likelihood contour lines be #
#         produced (default to TRUE only if the data has 2 columns)  #
#         note that user is advised to alter this parameter only if  #
#         the data is bivariate and he/she decides not to produce    #
#         bivariate plot                                             #
# main --- main title of the graphics                                #
# col --- background colOR of contour lines                          #
# lwd --- lINE wIdTH likelihood function and bivariate likelihood    #
#         contour lines                                              #
# cex.text, cex.lab, cex.main --- respective cHARACTER exPANSIONS    #
#         of text (default 1.5), AXIS labELS (default 1.5), and      #
#         main TITLE (default 2)                                     #
# ... --- other graphics parameters of   plot   function may also    #
#         be provided for each univariate likelihood function plot.  #
#                                                                    #
# Created by: JC Wang                                                #
######################################################################
{
  small <- min(data)
  varname <- if(is.vector(data)) deparse(substitute(data))
  else if(is.null(colnames(data)))
    paste("V", seq(ncol(data)), sep="")
  else colnames(data)
  data <- as.matrix(data) + add
  xdot <- colSums(log(data))
  nobs <- nrow(data)
  nvar <- ncol(data)
  if(missing(lambda)){
    lambda <- seq(-1,1,0.025)
    lambda <- matrix(lambda,nlam<-length(lambda),nvar)
  }
  else if(!is.matrix(lambda))
    lambda <- matrix(lambda,nlam<-length(lambda),2)
  power <- function(x, nc, lambda){
    for(i in 1:nc)
      x[,i] <- if(lambda[i]) (x[,i]^lambda[i]-1)/lambda[i]
    else log(x[,i])
    x
  }
  ell <- function(lambda, x, n, k, xd){
    result <- sum((lambda-1)*xd)
    x <- power(x, k, lambda)
    S <- ((n-1)/n) * var(x)
    if(k!=1) S <- det(S)
    result - n/2*log(S)
  }
  if(bivariate) {
    old.par <- par(no.readonly=T)
    on.exit(par(old.par))
    par(mfrow=c(1,1))
    layout(matrix(c(1,1,2,4,3,4),3,2,T),widths=c(1/3,2/3),heights=c(1/7,3/7,3/7))
    screen(1)
    par(mar=rep(0.1,4))
    plot(0:1,0:1,axes=F,xlab='',ylab='',type='n')
    text(0.5,0.45,label=main,cex=cex.main,font=par("font.main"))
  }
  for(i in 1:nvar) {
    Ells <- numeric(nlam)
    for(j in 1:nlam)
      Ells[j] <- ell(lambda[j,i], data[,i,drop=F], nobs, 1, xdot[i])
    maxell <- max(Ells)
    lambda.hat <- mean(lambda[which(Ells==maxell),i])
    if(bivariate){
      screen(i+1)
      par(mar=c(5,4,2,1)+.1)
    }
    plot(range(lambda[,i]), range(Ells), type='n', main='', xlab="", ylab="", ...)
    if (!bivariate) title(main=main, cex.main=cex.main, line=1.5)
    title(xlab=as.expression(substitute(lambda[a],list(a=i))), cex.lab=cex.lab,
          ylab=as.expression(substitute(l*plain("(")*lambda[a]*plain(")"),list(a=i))))
    lines(lambda[,i], Ells, lwd=lwd)
    mtext(side=3, line=0.5, text=varname[i])
    lines(rep(lambda.hat,2), c(par('usr')[3],maxell), lty=3, col=2)
    text(lambda.hat, par('usr')[3]+0.1*diff(par('usr')[3:4]),
         label=as.expression(substitute(hat(lambda)[a]==b,list(a=i,b=lambda.hat))),
         cex=cex.text, xpd=T)
    cat("Optimal", paste("lambda",i,sep=""), "is", lambda.hat,"\n")
    return(lambda.hat)
  }
  if(bivariate) {
    screen(4)
    Ells <- matrix(0,nlam,nlam)
    for(i in 1:nlam) for(j in 1:nlam)
      Ells[i,j] <- ell(c(lambda[i,1],lambda[j,2]), data, nobs,2,xdot)
    maxell <- max(Ells)
    j <- which(Ells==maxell)[1]
    lam1 <- lambda[((j-1) %% nlam) + 1, 1]
    lam2 <- lambda[((j-1) %/% nlam) + 1, 2]
    par(mar=c(5,4,4,1)+.1,pty='s')
    plot(lambda[,1],lambda[,2],type='n',xlab='',ylab='')
    title(xlab=expression(lambda[1]), ylab=expression(lambda[2]),cex.lab=cex.lab)
    rect(par('usr')[1],par('usr')[3],par('usr')[2],par('usr')[4],col=col)
    contour(lambda[,1],lambda[,2],Ells,add=T,col=1, lwd=lwd)
    lines(c(lam1,lam1),c(par('usr')[3],lam2), lty=3, col=2)
    lines(c(par('usr')[1],lam1),c(lam2,lam2), lty=3, col=2)
    text(lam1+0.05*diff(par('usr')[1:2]), lam2+0.05*diff(par('usr')[3:4]), cex=cex.text,
         label=as.expression(substitute(bold(hat(lambda))*plain(" = (")*a*plain(",")*b*plain(")"),list(a=lam1,b=lam2))))
    cat("Optimal (lambda1,lambda2) is (",lam1,",",lam2,")\n")
    return(lam1)
    return(lam2) # this would not work, since a function will quit after the first return statement
  }
  #invisible()
}
